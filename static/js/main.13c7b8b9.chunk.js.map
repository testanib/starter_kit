{"version":3,"sources":["logo.png","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mint","color","console","log","state","contract","methods","send","from","account","once","receipt","setState","colors","concat","toConsumableArray","balance","loadWeb3","loadBlockchainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","Color","networks","abi","address","Contract","totalSupply","i","_this2","react_default","a","createElement","className","href","rel","id","role","onSubmit","event","preventDefault","value","type","placeholder","ref","input","map","index","key","style","backgroundColor","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13c7b8b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06825633.png\";","import React, { Component } from 'react';\nimport logo from '../logo.png';\nimport Web3 from 'web3';\nimport './App.css';\nimport Color from '../abis/Color.json';\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: '0x0',\n      balance: '0',\n      contract: null,\n      colors: [],\n    };\n  }\n\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n\n    const networkId = await web3.eth.net.getId();\n    const networkData = Color.networks[networkId];\n    if (networkData) {\n      const abi = Color.abi;\n      const address = networkData.address;\n      const contract = await new web3.eth.Contract(abi, address);\n      this.setState({ contract: contract });\n      const totalSupply = await contract.methods.totalSupply().call();\n      this.setState({ totalSupply: totalSupply });\n      for (let i = 0; i < totalSupply; i++) {\n        const color = await contract.methods.colors(i).call();\n        this.setState({ colors: [...this.state.colors, color] }); // add to colors array\n      }\n    } else {\n      window.alert('Smart contract not deployed to detected network.');\n    }\n  }\n  \n  mint = (color) => {\n    console.log('minting color: ', color);\n    this.state.contract.methods.mint(color).send({ from: this.state.account })\n      .once('receipt', (receipt) => {\n        this.setState({ colors : [...this.state.colors, color] });\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"/\"\n            rel=\"noopener noreferrer\"\n          >\n            Color NFT\n          </a>\n          <ul className=\"navbar-nav px-3\">\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n              <small className=\"text-white\"><span id=\"account\">{this.state.account}</span></small>\n            </li>\n          </ul>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n               <h1>Mint Token</h1>\n                <form onSubmit={(event) =>{\n                  event.preventDefault();\n                  const color = this.color.value\n                  this.mint(color);\n                }}>\n                  <input\n                    type=\"text\"\n                    className='form-control mb-1'\n                    placeholder='Color Hex ex: #ffffff'\n                    ref={(input) => { this.color = input; }} // ref is a react thing that allows us to access the input element \n                  />\n                  <input type=\"submit\" value=\"Mint\" className=\"btn btn-primary\" />  \n                </form>\n              </div>\n            </main>\n          </div>\n          <hr/>\n          <div className=\"row text-center\">\n            { this.state.colors.map((color, index) => {\n              return (\n                <div className=\"col-sm-4\" key={index}>\n                  <div className=\"token\" style={{backgroundColor: color}}></div>\n                   <div>{color}</div>\n                  \n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}